using System.Security.Claims;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using MvcAuth.Data;
using MvcAuth.Models;

namespace MvcAuth.Controllers;

[Authorize]
public class TeamController : Controller
{

    private ApplicationDbContext _context;

    public TeamController(ApplicationDbContext context)
    {
        _context = context;
    }
    
    // GET
    public async Task<IActionResult> Index()
    {
        //Get the Id of current User to retrive the only the Teams associated with that user
        var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        // Get the teams associated with the current user
        var userTeams = await _context.UserTeams
            .Where(ut => ut.UserId == userId)
            .Select(ut => ut.Team)
            .ToListAsync();

        return View(userTeams);
    }

    [HttpGet]
    public IActionResult Create()
    {
        return View();
    }
    
    [HttpPost]
    public async Task<IActionResult> Create(Team team)
    {
        //Check the Model if its Valid
        if (ModelState.IsValid)
        {
            //Try to catch any mistakes that the application might throw
            try
            {
                // Add the new team to the database
                _context.Teams.Add(team);
                await _context.SaveChangesAsync();

                // Retrieve the current logged-in user's ID
                var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                if (userId != null)
                {
                    // Retrieve the TeamID generated by the database
                    var teamId = team.TeamID;

                    // Create a new UserTeam entry associating the current user with the new team
                    var userTeam = new UserTeam
                    {
                        UserId = userId,
                        TeamId = teamId,
                        IsMenager = true // User creating the team is the manager by default
                    };
                    
                    //Add the Logged in user and the newly created Team to the UserTeam table & Save changes 
                    _context.UserTeams.Add(userTeam);
                    await _context.SaveChangesAsync();
                }

                return RedirectToAction("Index");
            }
            catch (Exception e)
            {
                ModelState.AddModelError(string.Empty, $"Something went wrong: {e.Message}");
            }
            
        }
        ModelState.AddModelError(String.Empty, "Somthing Went Wrong");
        return View(team);
    }
    
    [HttpGet]
    public async Task<IActionResult> Edit(int id)
    {
        //At context Team table get team that TeamId is == to id we have at paramter
        var team = await _context.Teams.FirstOrDefaultAsync(x => x.TeamID == id);
        return View(team);
    }
    
    [HttpPost]
    public async Task<IActionResult> EditName(Team team)
    {
        if (ModelState.IsValid)
        {
            try
            {
                var existingTeam = await _context.Teams.FirstOrDefaultAsync(x => x.TeamID == team.TeamID);

                if (existingTeam != null)
                {
                    existingTeam.TeamName = team.TeamName;
                    await _context.SaveChangesAsync();
                    return RedirectToAction("Index");
                }
                else
                {
                    ModelState.AddModelError(string.Empty, "Invalid Team ID");
                    return View("Edit", team);
                }
            }
            catch (Exception e)
            {
                ModelState.AddModelError(string.Empty, $"Error updating team name: {e.Message}");
            }
        }

        ModelState.AddModelError(string.Empty, "Something went wrong");
        return View("Edit", team);
    }

    [HttpPost]
    public async Task<IActionResult> AddUser(string newUserEmail, int teamId)
    {
        if (ModelState.IsValid)
        {
            try
            {
                var team = await _context.Teams.FindAsync(teamId);

                if (team != null)
                {
                    var user = await _context.Users.FirstOrDefaultAsync(u => u.Email == newUserEmail);
                    if (user != null)
                    {
                        var userTeam = new UserTeam
                        {
                            UserId = user.Id,
                            TeamId = team.TeamID,
                            IsMenager = false // Set the default value for IsManager as needed
                        };
                        _context.UserTeams.Add(userTeam);
                        await _context.SaveChangesAsync();
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        ModelState.AddModelError(string.Empty, $"User with email {newUserEmail} does not exist.");
                        return View("Edit", team);
                    }
                }
                else
                {
                    ModelState.AddModelError(string.Empty, "Invalid Team ID");
                    return RedirectToAction("Index");
                }
            }
            catch (Exception e)
            {
                ModelState.AddModelError(string.Empty, $"Error adding user to team: {e.Message}");
            }
        }

        ModelState.AddModelError(string.Empty, "Something went wrong");
        return View("Edit");
    }
    
    [HttpPost]
    public async Task<IActionResult> RemoveUser(string newUserEmail, int teamId)
    {
        if (ModelState.IsValid)
        {
            
            // Retrieve the current user's ID
            var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            // Query the UserTeam table to find the entry corresponding to the current user and the team
            var userTeamEntry = await _context.UserTeams
                .FirstOrDefaultAsync(ut => ut.TeamId == teamId && ut.UserId == currentUserId);

            if (userTeamEntry != null && userTeamEntry.IsMenager)
            {
                try
                {
                    var user = await _context.Users.FirstOrDefaultAsync(u => u.Email == newUserEmail);
                    var userId = user.Id;
                    var exists =
                        await _context.UserTeams.FirstOrDefaultAsync(x => x.TeamId == teamId && x.UserId == userId);

                    if (exists != null)
                    {

                        _context.UserTeams.Remove(exists);
                        await _context.SaveChangesAsync();
                        return RedirectToAction("Index");
                    }
                    else
                    {
                        ModelState.AddModelError(string.Empty, "Invalid Team ID");
                        return RedirectToAction("Index");
                    }
                }
                catch (Exception e)
                {
                    ModelState.AddModelError(string.Empty, $"Error adding user to team: {e.Message}");
                }
            }
        }

        ModelState.AddModelError(string.Empty, "Something went wrong");
        return View("Edit");
    }
    
    [HttpPost]
    public async Task<IActionResult> LeaveTeam(Team team)
    {
        if (ModelState.IsValid)
        {
            try
            {
                var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                var exists = await _context.UserTeams.FirstOrDefaultAsync(x => x.TeamId == team.TeamID && x.UserId == userId);

                if (exists != null)
                {
                    _context.UserTeams.Remove(exists);
                    await _context.SaveChangesAsync();
                    return RedirectToAction("Index");

                }
                ModelState.AddModelError(String.Empty, "Invalid Team ID");
                return View("Edit", team);

            }
            catch (Exception e)
            {
                ModelState.AddModelError(String.Empty, $"Somthing Went Wrong {e.Message}");
            }
            
            
        }
        
        ModelState.AddModelError(String.Empty, "Somthing Went Wrong");
        return View("Edit");
    }
    
    
    [HttpGet]
    public async Task<IActionResult> Delete(int id)
    {
        var team = await _context.Teams.FirstOrDefaultAsync(x => x.TeamID == id);
        return View(team);
    }

    [HttpPost]
    public async Task<IActionResult> Delete(Team team)
    {
        if (ModelState.IsValid)
        {
            // Retrieve the current user's ID
            var currentUserId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            // Query the UserTeam table to find the entry corresponding to the current user and the team
            var userTeamEntry = await _context.UserTeams
                .FirstOrDefaultAsync(ut => ut.TeamId == team.TeamID && ut.UserId == currentUserId);
            
            if (userTeamEntry != null && userTeamEntry.IsMenager)
            {
                try
                {
                    var existsingTeam = await _context.Teams
                        .Include(t => t.UserTeams)
                        .FirstOrDefaultAsync(x => x.TeamID == team.TeamID);

                    if (existsingTeam != null)
                    {
                        _context.UserTeams.RemoveRange(existsingTeam.UserTeams);

                        _context.Teams.Remove(existsingTeam);

                        await _context.SaveChangesAsync();
                        return RedirectToAction("Index");

                    }

                    ModelState.AddModelError(String.Empty, "Invalid Team To Delete");
                    return View(team);

                }
                catch (Exception e)
                {
                    ModelState.AddModelError(String.Empty, $"Somthing Went Wrong {e.Message}");
                    return View(team);

                }
            }
            else
            {
                // User is not authorized to delete the team
                ModelState.AddModelError(String.Empty, "You are not authorized to delete this team.");
            }

        }
        
        ModelState.AddModelError(String.Empty, "Somthing Went Wrong");
        return View();
    }

}